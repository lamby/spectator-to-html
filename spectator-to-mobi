#!/usr/bin/env python3

import re
import sys
import json
import click
import shutil
import hashlib
import requests
import tempfile
import subprocess
import magazine_to_mobi


CONFIG = (
    {"name": "Portrait of the week", "ignore_title": True},
    {"name": "Leading article", "show_title": False},
    {"name": "Features", "show_title": False},
    {"name": "The Spectator's Notes"},
    {"name": "Columns"},
    {"name": "Diary"},
    {"name": "Interview"},
    {},
    {"name": "Any other business"},
    {"name": "Barometer"},
    {"name": "Ancient and modern"},
    {"name": "Letters", "ignore_title": True},
    {"name": "Notes on"},
    {"name": "Arts"},
    {"name": "Arts feature"},
    {"name": "Books"},
    {"name": "Music"},
    {"name": "Real life"},
    {"name": "High life"},
    {"name": "Low life"},
    {"name": "Radio"},
    {"name": "Television"},
    {"name": "Cinema"},
    {"name": "Film"},
    {"name": "Spectator Sport"},
    {"name": "No sacred cows"},
    {"name": "The Wiki Man"},
    {"name": "Mind your language"},
    {"name": "Food"},
    {"name": "Dear Mary", "ignore_title": True},
    {"name": "Battle for Britain", "exclude": True, "ignore_title": True},
    {"name": "Bridge", "exclude": True, "ignore_title": True},
    {"name": "Chess puzzle", "exclude": True, "ignore_title": True},
    {"name": "Chess", "exclude": True},
    {"name": "Competition", "exclude": True},
    {"name": "Crossword solution", "exclude": True, "ignore_title": True},
    {"name": "Crossword", "exclude": True, "ignore_title": True},
    {"name": "Dance", "exclude": True},
    {"name": "Drink", "exclude": True},
    {"name": "Exhibitions", "exclude": True},
    {"name": "Opera", "exclude": True},
    {"name": "Pop", "exclude": True},
    {"name": "Spectator Wine", "exclude": True},
    {"name": "The Listener", "exclude": True},
    {"name": "The turf", "exclude": True},
    {"name": "Theatre", "exclude": True},
    {"name": "Wild life", "exclude": True},
)

GENERIC_AUTHORS = {"The Spectator", "Doc"}

CONFIG_BY_NAME = {}
for idx, x in enumerate(CONFIG):
    x["idx"] = idx
    CONFIG_BY_NAME[x.get("name")] = x


@click.command()
@click.argument("api_key", default="bltf04078f3cf7a9c30")
@click.argument("access_token", default="cs4b204a44bc4e88da701dbc9b")
@click.option(
    "--filename", default="", help="target filename (default: auto-generated)"
)
@click.option(
    "--keep-html",
    is_flag=True,
    default=False,
    help="Keep (and print) the HTML sources directory",
)
@click.option(
    "--verbosity",
    type=int,
    default=1,
    help="Verbosity level; 0=minimal output, 1=normal output, "
    "2=verbose output, 3=very verbose output",
)
def main(*args, **kwargs):
    return SpectatorToMobi(*args, **kwargs).main()


class SpectatorToMobi(magazine_to_mobi.BaseToMobi):
    NAME = "spectator-to-mobi"
    PREFIX = "The_Spectator"
    BASE_URL = "https://spectator.co.uk"

    def __init__(
        self, api_key, access_token, filename, keep_html, verbosity,
    ):
        super().__init__()

        self.api_key = api_key
        self.access_token = access_token

        self.filename = filename
        self.keep_html = keep_html
        self.verbosity = verbosity

        self._parsed = None

    def main(self):
        self.context = {"articles": [], "title": "The Spectator"}

        self.setup_logging()

        try:
            self.handle_base()
        except Exception:
            if self._parsed:
                with tempfile.NamedTemporaryFile(
                    prefix="spectator-to-mobi-",
                    mode="w",
                    suffix=".json",
                    delete=False,
                ) as f:
                    json.dump(self._parsed, f, indent=2)
                    self.log.exception(
                        "Exception caught; writing last output to %s", f.name
                    )
            raise

        t = tempfile.mkdtemp(prefix=self.NAME)

        try:
            self.generate_mobi(t)
        finally:
            if self.keep_html:
                self.log.info("Keeping HTML in %s/index.html", t)
                self.log.debug("Opening %s/index.html with xdg-open", t)
                try:
                    subprocess.call(("xdg-open", "{}/index.html".format(t)))
                except FileNotFoundError:
                    pass
            else:
                shutil.rmtree(t, ignore_errors=True)

        return 0

    def handle_base(self):
        self.log.info("Starting conversion of %s", self.BASE_URL)

        data = self.parse(
            "/content_types/magazine_issue/entries?environment=live&desc=issue_date&limit=1&only[BASE][]=url"
        )

        url = data["entries"][0]["url"]
        date = self.context["date"] = url.split("/")[-1]

        self.log.debug("Latest magazine for %s is at %s", date, url)

        data = self.parse(
            "/content_types/article/entries?environment=live&include[]=topic&include[]=magazine_content_production_only.magazine_issue&include[]=magazine_content_production_only.magazine_subsection&include[]=author&query={%22magazine_content_production_only.magazine_issue%22:%20{%22$in_query%22:%20{%20%22url%22:%20%22"
            + url
            + "%22%20},%20%22_content_type_uid%22:%20%22magazine_issue%22},%20%22_content_type_uid%22:%20%22article%22}"
        )

        self.context["cover"] = data["entries"][0][
            "magazine_content_production_only"
        ]["magazine_issue"][0]["magazine_cover"]["url"]
        self.log.debug("Found cover at %s", self.context["cover"])

        for x in data["entries"]:
            self.handle_article(x)

        def key_fn(x):
            try:
                return CONFIG_BY_NAME[x["subsection"]]["idx"]
            except KeyError:
                return CONFIG_BY_NAME[None]["idx"]

        self.context["articles"].sort(key=key_fn)

    def handle_article(self, data):
        author = ", ".join(x["title"] for x in data["author"])

        # Title
        title = data["title"]

        # If the title starts with the author's name, strip it out.
        title = title.replace("{}: ".format(author), "")

        byline = data["byline"]
        byline = byline.replace(", says {}".format(author), ".")

        subsection = data["magazine_content_production_only"][
            "magazine_subsection"
        ][0]["title"]

        try:
            image = data["hero_image"][0]["url"]
        except IndexError:
            image = None  # Hero images are optional

        # Subsection

        # Rewrite first
        if subsection.startswith("More from "):
            subsection = subsection[10:]
        if subsection.startswith("More features"):
            subsection = "Features"
        if subsection == "Lead book review":
            subsection = "Books"
        if subsection == "Notes on...":
            subsection = "Notes on"

        try:
            if CONFIG_BY_NAME[subsection]["exclude"]:
                return
        except KeyError:
            pass

        try:
            if CONFIG_BY_NAME[subsection]["ignore_title"]:
                title = subsection
                byline = ""
        except KeyError:
            pass

        try:
            if author in GENERIC_AUTHORS:
                author = ""
        except KeyError:
            pass

        # Byline

        # If byline is missing a full-stop, append one. We match for a
        # lower-case letter, to avoid whack-a-mole with various other
        # punctuation.
        if re.search(r"[a-z]$", byline or ""):
            byline = "{}.".format(byline)

        # Body
        body = data["text_body"]

        # Add book metadata
        for x in reversed(data["books_arts"]):
            body = "<p><em>{}</em> {}</p>{}".format(
                x["books_title"], x["books_author"], body
            )

        body = magazine_to_mobi.widont(body)

        for pattern, repl in ((r"\s*CSH</p>", ""),):
            body = re.sub(pattern, repl, body)

        data = {
            "title": title,
            "byline": byline,
            "author": author,
            "url": "https://www.spectator.co.uk{}".format(data["url"]),
            "idx": len(self.context["articles"]),
            "body": body,
            "image": image,
            "subsection": subsection,
        }

        self.context["articles"].append(data)

    def parse(self, url, **kwargs):
        url = "https://cdn.contentstack.io/v3{}".format(url)

        self._parsed = self.get(url, **kwargs).json()

        return self._parsed

    def get(self, url, **kwargs):
        kwargs.update(
            {"api_key": self.api_key, "access_token": self.access_token}
        )

        return super().get(url, **kwargs)

    def json_find(self, needle, haystack):
        if not isinstance(haystack, dict):
            return

        for k, v in haystack.items():
            if k == needle:
                yield v

            elif isinstance(v, dict):
                for x in self.json_find(needle, v):
                    yield x

    def json_find_first(self, needle, haystack):
        return list(self.json_find(needle, haystack))[0]


if __name__ == "__main__":
    sys.exit(main())
