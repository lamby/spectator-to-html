#!/usr/bin/env python3

import sys
import click
import shutil
import requests
import tempfile
import subprocess
import magazine_to_mobi

from lxml import html, etree


@click.command()
@click.option(
    "--filename", default="", help="target filename (default: auto-generated)"
)
@click.option(
    "--keep-html",
    is_flag=True,
    default=False,
    help="Keep (and print) the HTML sources directory",
)
@click.option(
    "--verbosity",
    type=int,
    default=1,
    help="Verbosity level; 0=minimal output, 1=normal output, "
    "2=verbose output, 3=very verbose output",
)
def main(*args, **kwargs):
    return LRBToMobi(*args, **kwargs).main()


class LRBToMobi(magazine_to_mobi.BaseToMobi):
    NAME = "lrb-to-mobi"
    PREFIX = "London_Review_of_Books"
    BASE_URL = "https://lrb.co.uk"

    def __init__(
        self, filename, keep_html, verbosity,
    ):
        super().__init__()

        self.filename = filename
        self.keep_html = keep_html
        self.verbosity = verbosity

    def main(self):
        self.context = {"articles": [], "title": "London Review of Books"}

        self.setup_logging()

        self.handle_base()

        t = tempfile.mkdtemp(prefix="lrb-to-mobi-")

        try:
            self.generate_mobi(t)
        finally:
            if self.keep_html:
                self.log.info("Keeping HTML in %s/index.html", t)
                self.log.debug("Opening %s/index.html with xdg-open", t)
                try:
                    subprocess.call(("xdg-open", "{}/index.html".format(t)))
                except FileNotFoundError:
                    pass
            else:
                shutil.rmtree(t, ignore_errors=True)

        return 0

    def handle_base(self):
        base = self.get("{}/the-paper".format(self.BASE_URL)).content
        root = html.fromstring(base)

        # Parse latest issue link
        elem = root.find(".//a[@title='Latest Issue']")
        latest = elem.attrib["href"]

        # Get latest issue
        base = self.get("{}{}".format(self.BASE_URL, latest)).content
        root = html.fromstring(base)

        # Parse date
        self.context["date"] = root.find(
            ".//div[@class='toc-header-holder']//h2"
        ).text.split(" Â· ")[-1]

        # Parse cover
        self.context["cover"] = "{}{}".format(
            self.BASE_URL,
            root.find(
                ".//div[@class='article-issue-cover-image']//img"
            ).attrib["data-appsrc"],
        )

        for x in root.findall(".//div[@class='toc-grid-items']/a"):
            self.handle_article(x)

    def handle_article(self, elem):
        url = "{}{}".format(self.BASE_URL, elem.attrib["href"])

        base = self.get(url).content
        root = html.fromstring(base)

        author = elem.cssselect("h3")[0].text.strip()

        try:
            title = root.cssselect("div#article-heading-holder h1 span")[
                0
            ].text
        except IndexError:
            title = author
            author = ""

        body = etree.tostring(root.cssselect("div.article-copy")[0]).decode(
            "utf-8"
        )

        # LRB-specific
        body = body.replace("<h2 ", "<h3 ")
        body = body.replace('a href="/', 'a href="{}/'.format(self.BASE_URL))

        # FIXME: Actually download image and convert
        body = body.replace(
            '<img src="" data-appsrc="/', '<img src="{}/'.format(self.BASE_URL)
        )

        body = magazine_to_mobi.widont(body)

        self.context["articles"].append(
            {
                "url": url,
                "subsection": title,
                "title": title,
                "author": author,
                "image": None,
                "body": body,
            },
        )


if __name__ == "__main__":
    sys.exit(main())
